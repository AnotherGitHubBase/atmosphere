- name: install ubuntu dependencies
  apt: name={{ item }} state=present
  with_items:
    - python
    - python-ldap
    - python-software-properties
    - python-httplib2
    - libfuse2
    - tmux
    - screen
    - autoconf
    - gcc
    - make
    - patch
    - tcsh
    - zsh
    - mosh

- name: install ubuntu dependencies
  apt: name={{ item }} state=present
  with_items:
    - denyhosts
    - fuse-utils
  when: "{{ ansible_distribution_major_version | version_compare('14', '<') }}"

- name: install ubuntu dependencies
  apt: name={{ item }} state=present
  with_items:
    - fuse
  when: "{{ ansible_distribution_major_version | version_compare('14', '<') }}"

- name: set hostname
  hostname: name={{ ansible_hostname }}


- name: /etc/ssh/sshd_config changes
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="{{ item.regexp}}" line="{{ item.line }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin without-password'}
    - { regexp: '^UseDNS', line: 'UseDNS no'}

- name: Append AllowGroups Line to /etc/ssh/sshd_config 
  lineinfile: dest=/etc/ssh/sshd_config line="AllowGroups users core-services root"
  notify:
  - restart ubuntu ssh


- name: Set timezone variables
  copy: content={{my_timezone}} dest=/etc/timezone owner=root group=root mode=0644 backup=yes 

- name: Remove old timezone link
  file: dest=/etc/localtime state=absent

- name: Update timezone
  file: src=/usr/share/zoneinfo/US/Arizona dest=/etc/localtime owner=root group=root state=link

- name: create denyhosts directory if it does not exist 
  file: path={{denyhosts_filepath}} state=directory
  when: "{{ ansible_distribution_major_version | version_compare('14', '<') }}"

- name: Add allowed-hosts file to denyhosts directory if it does not exist 
  copy: src=allowed-hosts dest={{denyhosts_filepath}} force=yes
  when: "{{ ansible_distribution_major_version | version_compare('14', '<') }}"

- name: add block service for /etc/denyhosts.conf  
  lineinfile: dest=/etc/denyhosts.conf backup=yes line="BLOCK_SERVICE = ALL"
  when: "{{ ansible_distribution_major_version | version_compare('14', '<') }}"

- name: verify text in rc.local
  command: grep '# this is for atmosphere' /etc/rc.local
  register: rc_local_atmo_exists 
  ignore_errors: true
  
- name: add necessary lines to rc.local
  lineinfile: dest=/etc/rc.local line="\n# this is for atmosphere\nif [ -x /etc/rc.local.atmo ]; then\n\t/etc/rc.local.atmo\nfi"
  when: rc_local_atmo_exists|failed

- name: touch rc.local.atmo to ensure that it exists
  file: path=/etc/rc.local.atmo state=touch  

- name: create rc.local.atmo
  lineinfile: dest=/etc/rc.local.atmo line='#!/bin/sh -e\ndepmod -a\nmodprobe acpiphp\nhostname {{ ansible_hostname }}\n'
 
- name: install motd
  copy: src=motd dest=/etc/motd.tail

- name: remove motd help text file, if present
  file: path=/etc/update-motd.d/10-help-text state=absent

- name: check ubuntu legal notice
  stat: path=/etc/legal
  register: atmo_common_ubuntu_legal

- name: move ubuntu legal file if it exists
  command: mv /etc/legal /etc/legal.disabled
  when: atmo_common_ubuntu_legal.stat.exists == True

