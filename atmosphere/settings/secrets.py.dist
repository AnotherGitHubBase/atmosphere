""
Settings that are secrets and otherwise sensitive.

""
import sys

globals().update(vars(sys.modules["atmosphere.settings"]))

## LICENSES
ATMOSPHERE_VNC_LICENSE = ""


# Groupy + OAuth
GROUPY_SERVER=""
OAUTH_ISSUE_USER=""
OAUTH_SCOPE=""
OAUTH_PRIVATE_KEY=""


## AUTH SETTINGS
TOKEN_EXPIRY_TIME = timedelta(days=1)
LDAP_SERVER = ""
LDAP_SERVER_DN = ""

## SERVICE SETTINGS
# Eucalyptus provider secrets
EUCA_S3_URL = ""
EUCA_EC2_URL = ""
EUCA_ADMIN_KEY = ""
EUCA_ADMIN_SECRET = ""
EUCALYPTUS_ARGS = {
    "key": EUCA_ADMIN_KEY,
    "secret": EUCA_ADMIN_SECRET,
    "url": EUCA_EC2_URL,
    "account_path": "/services/Accounts"
}


#
# IMAGING SETTINGS
#

# STORAGE SETTINGS

# iRODS Storage:
IRODS_HOST=""
IRODS_PORT=0  # Replace with iRODS port
IRODS_ZONE=""
# In order to use iRODS effectively, we require iRODS administrator credentials
# to emulate other users and act on their behalf
IRODS_ADMIN_USER = ""
IRODS_ADMIN_PASS = ""

# Local Storage:
# Local storage is necessary for imaging Eucalyptus
# There should be a minimum of 10GB of space remaining
# before attempting imaging.
# Ideally, this location should point to a storage volume
LOCAL_STORAGE = ""

#Eucalyptus Imaging secrets
EUCA_PRIVATE_KEY = ""
EC2_CERT_PATH = ""
EUCALYPTUS_CERT_PATH = ""

#Eucalyptus Dicts
EUCA_IMAGING_ARGS = {
    "key": EUCA_ADMIN_KEY,
    "secret": EUCA_ADMIN_SECRET,
    "ec2_url": EUCA_EC2_URL,
    "s3_url": EUCA_S3_URL,
    "ec2_cert_path": EC2_CERT_PATH,
    "pk_path": EUCA_PRIVATE_KEY,
    "euca_cert_path": EUCALYPTUS_CERT_PATH,
    "config_path": "/services/Configuration",
    "extras_root": PROJECT_ROOT
}

# Openstack provider secrets
OPENSTACK_PROVIDER_KEY = ""
OPENSTACK_ADMIN_KEY = ""
OPENSTACK_ADMIN_SECRET = ""
OPENSTACK_AUTH_URL = ""
OPENSTACK_ADMIN_URL = OPENSTACK_AUTH_URL.replace("5000", "35357")
OPENSTACK_ADMIN_TENANT = ""
OPENSTACK_DEFAULT_REGION = ""
OPENSTACK_DEFAULT_ROUTER = ""

# Openstack provider dictionaries
OPENSTACK_ARGS = {
    "username": OPENSTACK_ADMIN_KEY,
    "password": OPENSTACK_ADMIN_SECRET,
    "tenant_name": OPENSTACK_ADMIN_TENANT,
    "auth_url": OPENSTACK_ADMIN_URL,
    "region_name": OPENSTACK_DEFAULT_REGION
}
OPENSTACK_NETWORK_ARGS = {
    "auth_url": OPENSTACK_ADMIN_URL,
    "region_name": OPENSTACK_DEFAULT_REGION,
    "router_name": OPENSTACK_DEFAULT_ROUTER
}
# Add additional openstack providers for testing
# (Optional)
#  # Openstack provider #2
#  
#  OPENSTACK_2_PROVIDER_KEY = ""
#  OPENSTACK_2_ADMIN_KEY = ""
#  OPENSTACK_2_ADMIN_SECRET = ""
#  OPENSTACK_2_AUTH_URL = ""
#  OPENSTACK_2_ADMIN_URL = OPENSTACK_2_AUTH_URL.replace("5000", "35357")
#  OPENSTACK_2_ADMIN_TENANT = ""
#  OPENSTACK_2_DEFAULT_REGION = ""
#  OPENSTACK_2_DEFAULT_ROUTER = ""
#  OPENSTACK_2_USER_ROLE = ""
#  OPENSTACK_2_ADMIN_ROLE = ""
#  
#  # OPENSTACK_2 provider dictionaries
#  OPENSTACK_2_ARGS = {
#      "username": OPENSTACK_2_ADMIN_KEY,
#      "password": OPENSTACK_2_ADMIN_SECRET,
#      "tenant_name": OPENSTACK_2_ADMIN_TENANT,
#      "auth_url": OPENSTACK_2_ADMIN_URL,
#      "region_name": OPENSTACK_2_DEFAULT_REGION,
#      "user_role": OPENSTACK_2_USER_ROLE,
#      "admin_role": OPENSTACK_2_ADMIN_ROLE
#  }
#  OPENSTACK_2_NETWORK_ARGS = {
#      "auth_url": OPENSTACK_2_ADMIN_URL,
#      "region_name": OPENSTACK_2_DEFAULT_REGION,
#      "router_name": OPENSTACK_2_DEFAULT_ROUTER
#  }
#  # Openstack provider #3
#  
#  OPENSTACK_3_PROVIDER_KEY = ""
#  OPENSTACK_3_ADMIN_KEY = ""
#  OPENSTACK_3_ADMIN_SECRET = ""
#  OPENSTACK_3_AUTH_URL = ""
#  OPENSTACK_3_ADMIN_URL = OPENSTACK_3_AUTH_URL.replace("5000", "35357")
#  OPENSTACK_3_ADMIN_TENANT = ""
#  OPENSTACK_3_DEFAULT_REGION = ""
#  OPENSTACK_3_DEFAULT_ROUTER = ""
#  OPENSTACK_3_USER_ROLE = ""
#  OPENSTACK_3_ADMIN_ROLE = ""
#  
#  # OPENSTACK_3 provider dictionaries
#  OPENSTACK_3_ARGS = {
#      "username": OPENSTACK_3_ADMIN_KEY,
#      "password": OPENSTACK_3_ADMIN_SECRET,
#      "tenant_name": OPENSTACK_3_ADMIN_TENANT,
#      "auth_url": OPENSTACK_3_ADMIN_URL,
#      "region_name": OPENSTACK_3_DEFAULT_REGION,
#      "user_role": OPENSTACK_3_USER_ROLE,
#      "admin_role": OPENSTACK_3_ADMIN_ROLE
#  }
#  OPENSTACK_3_NETWORK_ARGS = {
#      "auth_url": OPENSTACK_3_ADMIN_URL,
#      "region_name": OPENSTACK_3_DEFAULT_REGION,
#      "router_name": OPENSTACK_3_DEFAULT_ROUTER
#  }
OPENSTACK_PROVIDERS = {
    OPENSTACK_PROVIDER_KEY: (OPENSTACK_ARGS, OPENSTACK_NETWORK_ARGS)
    #OPENSTACK_2_PROVIDER_KEY : OPENSTACK_2_ARGS, OPENSTACK_2_NETWORK_ARGS)
    #OPENSTACK_3_PROVIDER_KEY : OPENSTACK_3_ARGS, OPENSTACK_3_NETWORK_ARGS)
    }

#AWS Provider secrets
#AWS_KEY = ""
#AWS_SECRET = ""
#AWS_S3_URL = ""
#AWS_S3_KEY = ""
#AWS_S3_SECRET = ""

#pyes secrets
ELASTICSEARCH_HOST = ""
ELASTICSEARCH_PORT = 9200

#Django-Celery secrets
BROKER_URL = ""
BROKER_BACKEND = ""
REDIS_PORT = 6379
REDIS_HOST = ""
BROKER_USER = ""
BROKER_PASSWORD = ""
REDIS_DB = 0
REDIS_CONNECT_RETRY = True
CELERY_SEND_EVENTS = True
CELERY_RESULT_BACKEND = ""
CELERY_TASK_RESULT_EXPIRES = 10
CELERYBEAT_SCHEDULER = ""

# Django-Celery Development settings
# CELERY_ALWAYS_EAGER = True

import djcelery
djcelery.setup_loader()


